package manager;

import model.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;


import static org.junit.jupiter.api.Assertions.*;

class TaskManagerTest {

    private TaskManager manager;

    @BeforeEach
    void setUp() {
        manager = new TaskManager();
    }

    @Test
    void addNewTaskAndFindById() {
        Task task = new Task(1234, "title", "desc", Status.NEW); // id будет перезаписан
        manager.addTask(task);

        Task saved = manager.getTaskById(task.getId());
        assertNotNull(saved, "Задача не найдена по id.");
        assertEquals(task, saved, "Добавленная и найденная задачи должны совпадать.");
    }

    @Test
    void addDifferentTypesAndRetrieveAll() {
        Task task = new Task(0, "t", "d", Status.NEW);
        Epic epic = new Epic(0, "e", "d", Status.NEW);
        manager.addTask(task);
        manager.addEpic(epic);

        Subtask sub = new Subtask(0, "s", "d", Status.NEW, epic.getId());
        manager.addSubtask(sub);

        assertEquals(1, manager.getAllTasks().size(), "Должна быть одна Task.");
        assertEquals(1, manager.getAllEpics().size(), "Должен быть один Epic.");
        assertEquals(1, manager.getAllSubtasks().size(), "Должна быть одна Subtask.");
    }

    @Test
    void idsAreUniqueAndAutoGenerated() {
        Task first = new Task(999, "f", "d", Status.NEW);
        Task second = new Task(999, "s", "d", Status.NEW);      // тот же id в конструкторе

        manager.addTask(first);
        manager.addTask(second);

        assertNotEquals(first.getId(), second.getId(),
                "Менеджер обязан переназначать id, чтобы избежать конфликта.");
    }

    @Test
    void immutabilityAfterAdd() {
        Task original = new Task(0, "origin", "desc", Status.NEW);
        manager.addTask(original);

        Task fromManager = manager.getTaskById(original.getId());
        assertEquals(original, fromManager);

        original.setStatus(Status.DONE);
        Task stillStored = manager.getTaskById(original.getId());

        assertSame(original, stillStored,
                "Manager хранит ту же самую ссылку, изменение видно.");
        assertEquals(Status.DONE, stillStored.getStatus(),
                "Статус внутри менеджера обновился вместе с объектом.");
    }

    @Test
    void epicStatusUpdatedWhenSubtasksAddedAndModified() {
        Epic epic = new Epic(0, "e", "d", Status.NEW);
        manager.addEpic(epic);

        Subtask s1 = new Subtask(0, "s1", "d", Status.NEW, epic.getId());
        manager.addSubtask(s1);

        assertEquals(Status.NEW, manager.getEpicById(epic.getId()).getStatus(),
                "У эпика с одной NEW‑подзадачей статус должен быть NEW.");

        s1.setStatus(Status.DONE);
        manager.updateSubtask(s1);

        assertEquals(Status.DONE, manager.getEpicById(epic.getId()).getStatus(),
                "У эпика со всеми DONE‑подзадачами статус должен быть DONE.");
    }
}